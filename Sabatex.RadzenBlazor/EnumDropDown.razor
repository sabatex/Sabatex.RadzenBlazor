@typeparam TItem 
@using System.Reflection;
@using System.ComponentModel.DataAnnotations;


<RadzenDropDown @bind-Value="Value"
                Data="@collection"
                ValueProperty="Value"
                TextProperty="text"
                Placeholder="@Placeholder"
                Style="width:100%"
                Change="async (value) => await ValueChanged.InvokeAsync((TItem)value)">
</RadzenDropDown>
    
@code
{
    [Parameter] public EventCallback<TItem> ValueChanged { get; set; }
    [Parameter] public TItem Value { get; set; } = default!;
    [Parameter] public string Placeholder { get; set; } = default!;

    bool allowClear = false;
    IEnumerable<object>? collection;

    private TItem? NullValue=>(TItem)(object)null;

    private IEnumerable<object> EnumAsKeyValuePair(Type enumType)
    {

        var result = from val in Enum.GetValues(enumType).Cast<Enum>().Distinct()
                     select new
                     {
                         Value = (TItem)(object)val,
                         Text = ((Enum)(object)val).GetDisplayDescription()
                     };
        if (Nullable.GetUnderlyingType(enumType) != null)
        {
            var r = result.ToList();
            r.Add(new { Value = NullValue, Text = string.Empty });
            return r;
        }
        return result;

    }


    protected override void OnInitialized()
    {

        base.OnInitialized();
        var nullableEnum = Nullable.GetUnderlyingType(typeof(TItem));
        var enums = Enum.GetValues(nullableEnum ==null?typeof(TItem):nullableEnum)
                        .Cast<TItem>()
                        .Select(s => new { Value = s, Text = ((Enum)(object)s).GetDisplayDescription() });
        if (nullableEnum != null)
        {
            var r = enums.ToList();
            r.Add(new { Value = NullValue, Text = "<null>" });
            collection = r;

        }
        else
            collection = enums;
 
    }
}
 

